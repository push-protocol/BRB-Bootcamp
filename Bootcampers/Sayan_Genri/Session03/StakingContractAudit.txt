Issue 1: Ownable Contract Initialization
Problem: The Ownable constructor is called with msg.sender, which is unnecessary as Ownable sets the owner to msg.sender by default.
Fix: Remove Ownable(msg.sender) from the constructor.
Improvement: Simplifies the contract and avoids redundant initialization.

Issue 2: Redundant Initialization Checks
Problem: Checking userStakeData[msg.sender][0].initialized is redundant since we are mapping directly to a non-zero ID on initialization.
Fix: Simplify the initialization check in the initializeUser function.
Improvement: Reduces unnecessary storage reads and improves gas efficiency.

Issue 3: Overly Verbose Struct Initialization
Problem: Struct initialization can be made more concise.
Fix: Simplify struct initialization by directly creating the struct.
Improvement: Enhances readability and reduces gas costs.

Issue 4: Inefficient State Variable Updates
Problem: Updating userStakeCount after creating a new stake is inefficiently placed.
Fix: Move userStakeCount increment before struct initialization.
Improvement: Reduces gas cost by optimizing the order of operations.

Issue 5: Unused Mappings and State Variables
Problem: The commented-out userStakeData mapping is unnecessary.
Fix: Remove the unused userStakeData mapping.
Improvement: Cleans up the code and avoids potential confusion.
